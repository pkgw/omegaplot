2007-02-15  Peter Williams  <peter@newton.cx>

	* omega/base.py (LinearAxis.__init__): Have the min and max be defaulted
	arguments.
	(RectField): New class that puts all the xaxis/yaxis and transformation
	stuff in one place. Also does the X/Y -> position mapping in specs, data,
	and chunks.
	(RectPlot.__init__): Have a defaultField instead of defaultXAxis and
	defaultYAxis.
	(RectPlot.magicAxisPainters): Adapt to RectField and clarify a bit.
	(FieldPainter.__init__): New class, stores a RectField and does a few
	useful things like emulating another FieldPainter on init.
	(RectDataPainter.__init__): Inherit from FieldPainter now.
	(RectDataPainter.doChunkPaint): Use the RectField to transform the data
	all at once. Makes the code a lot clearer now.
	(BandPainter.__init__): As above. Goodbye redundancy!
	(DiscreteHistogramPainter.__init__): As above.
	(LinePainter.__init__): This is not a StreamSink, so it's not a FieldPainter,
	although that should probably be fixed via multiple inheritance, but at least
	use a field object.

	* omega/stamps.py (Stamp.paint): This class is much simpler since now
	all of the value transformation is taken care of by someone else's
	RectField.
	(CrossXErrorBars.doPaint): New class, needed for Bower work. I will
	get around to doing this properly.

	* demo/lissajou.py: Clean up to new idioms. Satisfyingly more compact.
	* demo/dhisto.py: Same.
	* demo/derr.py: Same.
	* demo/discrete.py: Same.

2007-02-14  Peter Williams  <peter@newton.cx>

	* omega/util.py (makeQuickPipeline): Beginnings of a function to "just plot
	this data". Not very smart so far.
	(makeQuickDisplay): Calls the above and makes it into a LiveDisplay.

	* omega/__init__.py (QP): Export this as an alias to util.makeQuickPipeline
	(QD): Similar, for util.makeQuickDisplay.

	* omega/base.py (RectPlot.doPaint): Fix a mistake in the clip rectangle
	calculation.

	* omega/gtkUtil.py (OmegaDemoWindow.do_key_press_event): Make it possible
	to fullscreen the plot demo window if you know the appropriate mojo. Happy
	Valentine's Day, plotters!

2007-02-09  Peter Williams  <peter@newton.cx>

	* omega/stamps.py (DotYErrorBars): Subclass Dot.
	(CrossYErrorBars): Analog to the above.
	(BoxYErrorBars): Same. By god, I think this calls for a metaclass!

	* omega/__init__.py: Typo fix, LiveDisplay not Livedisplay.

	* omega/base.py (StreamSink.expose): Return self to potentially allow
	more compact expressions.
	(StreamSink.linkTo): Same.
	(StreamSink.linkExpose): Utility, link to a source and then expose that
	source in our bag.

2007-02-08  Peter Williams  <peter@newton.cx>

	* omega/gtkUtil.py (OmegaArea.__init__): Just take a PaintPipeline
	instead of constructing it ourself.
	(OmegaArea.getPipeline): Function to retrive our pipeline.
	(OmegaDemoWindow.__init__): Same as above.
	(OmegaDemoWindow.getPipeline): Same as above.
	(LiveDisplay.__init__): Same as above.
	(EOF): Set util.defaultLiveDisplay to our LiveDisplay class.

	* omega/__init__.py (StoredData): Import this from sources.
	(LiveDisplay): Import this from util now.

	* omega/util.py (defaultLiveDisplay): New field, should be set by
	external modules that define a suitable LiveDisplay class.
	(LiveDisplay): Function that just calls the above. May want to futz
	with the behavior later.
	(PaintPipeline.makeLiveDisplay): Little utility func that uses the above.
	I used this mechanism to solve a circular dep problem since gtkUtil depends
	on util.

	* omega/base.py (LinePainter.__init__): Hacky little class to just
	paint a single line. Makes me realize that we should implement a RectField
	class that encapsulates axes and transforms.

	* omega/bag.py (Bag.exposeSink): Return the registered sink so callers
	can use the result for more compact code.
	(Bag.linkTo): Say what the specs are to aid debugging.
	(FunctionFilter.__init__): Change the order of the source and sink spec
	arguments to be more natural: func maps sink -> source.

	* demo/discrete.py: Adapt to new LiveDisplay API.
	* demo/derr.py: Same.
	* demo/sinc.py: Same.
	* demo/dhisto.py: Same.
	* demo/lissajou.py: Same.
	* demo/stampDemo.py: Same.

2007-02-08  Peter Williams  <peter@newton.cx>

	* omega/stamps.py (Stamp.stampSpec): Fix stamp data, I think. Do what
	I mentioned below: provide 'X' and 'Y' stampSpec values, and map them
	into a sinkSpec using caller-provided X and Y spec values.
	(Stamp.paint): Take the data and 'mapx' and 'mapy' arguments; map X and
	Y parameters using those functions before passing the data off to doPaint.
	(*): Adapt to new API.
	(DotYErrorBars.doPaint): This works waaaay better now.

	* omega/base.py (RectDataPainter.sinkSpec): Fix to honor new Stamp
	getSinkSpec method.
	(RectDataPainter.transformX): Futz with transforming some more. Break
	it out into two routines that can be given to pointStamp if needed.
	(RectDataPainter.doChunkPaint): Simplify a fair bit. Just convert our
	chunk to a list, since the point of chunking is to make that something
	that's not stupid to do. And do less of other dumb stuff.

	* demo/lissajou.py (tempstyle): Oops, forgot to make this track new
	style-function API.

	* demo/stampDemo.py (StampPainter.doPaint): Adapt to new Stamp API.

2007-02-08  Peter Williams  <peter@newton.cx>

	* omega/stamps.py (Stamp.paint): Change all paint and doPaint functions
	to accept a helper argument which can map data values to X and Y values;
	needed for e.g. stamps that draw error bars. This model is broken: the
	stamp needs to assume that the X and Y axis dataSpecs are both F. There
	should be a stampSpec that has the usual data types as well as 'X' and 'Y',
	which some helper maps to appropriate values from the incoming data. Also,
	the whole (x, y, data) arguments are nearly redundant; see the RectDataPainter
	doChunkPaint routine.
	(DotYErrorBars.doPaint): Simple class that draws a dot with error bars
	in the Y axis.

	* omega/util.py (PaintPipeline.paintToSurfgen): Delete, this was
	kind of dumb way to do things.
	(GenericPointSizedFile.renderPipeline): Instead, have the surfgen
	paint a pipeline.
	(GenericPngFile.__init__): Add a surfgen-type class that creates
	an image surface (currently only ARGB32) and dumps it to a PNG file.
	(LargePngFile.__init__): Utility class that creates a 1024x768 PNG.
	(dump): Adapt to the new API. Should probably dump the 'surfgen' name
	now.
	
	* omega/base.py (RectDataPainter.transform): Change this to accept
	two arguments, not a tuple.
	(RectDataPainter.doChunkPaint): Fix algorithm to work if we have
	data to pass to the point stamp. The whole stamp data setup is really
	broken and needs fixing.
	(DiscreteHistogramPainter.transform): Change this signature too.

	* demo/derr.py: New demo, like discrete.py with some error bar point
	stamps.

	* omega/__init__.py: Import LargePngFile from util.

2007-02-08  Peter Williams  <peter@newton.cx>

	* omega/base.py (EnumeratedDiscreteAxis): New class, provides a
	DiscreteAxis with sequential integers.
	(DiscreteHistogramPainter.__init__): Paint a discrete histogram.

	* demo/dhisto.py (rdp): Demo discrete histogram painting. Nice little
	demo of the central limit theorem applied to discrete coin flips.

	* omega/styles.py (BitmapStyle.apply): If the style is a function,
	provide it with the style object so it can use its info.

	* omega/base.py (StampPaintHelper.__init__): Planned helper class to
	resolve some issues with painting stamps with error bars.

2007-02-07  Peter Williams  <peter@newton.cx>

	* demo/discrete.py (sources): Hey you can expose two sinks to the
	same name now, so do that.

2007-02-07  Peter Williams  <peter@newton.cx>

	* demo/discrete.py (sources): 
	* omega/base.py (EnumeratedDiscreteAxis.__init__): Break out from
	a more generic DiscreteAxis, so we can have discrete axes with large
	numbers of indices that are programmatically mapped (eg, the whole
	numbers 1 to 1000).
	(DiscreteAxisPainter.spaceExterior): Use more generic DiscreteAxis
	functions.
	(DiscreteAxisPainter.paint): Same.
	(DiscreteAxis.transform): Honor a padBoundaries field that controls
	whether the extreme axis items get mapped to the very edge of the field
	or not.

	* demo/discrete.py (rdp): Use EnumeratedDiscreteAxis now.

2007-02-05  Peter Williams  <peter@newton.cx>

	* omega/util.py: New file. Contains utility classes, mainly aimed
	at conveniently displaying or saving plots quickly.

	* omega/__init__.py: Import a few names from util.py into the
	main namespace.

	* omega/gtkUtil.py (OmegaArea): Use a PaintPipeline from util to store
	all our painting info instead of doing it ourselves.

	* omega/base.py (StreamSink.getBag): New utility function.
	(LinearAxis): Specify a default axis painter class for use with
	emulate functions below.
	(DiscreteAxis): Same.
	(RectPlot.__init__): Allow an optional 'emulate' argument which,
	if specified, will have its logical axes and axis painters copied.
	(RectPlot.magicAxisPainters): New function to conveniently set
	axis painters to smart values for great justice.
	(RectDataPainter.__init__): If the argument is a RectDataPainter,
	emulate its axes and bag.
	(RectDataPainter.setBounds): Convenience function to set the bounds 
	of the logical axes all at once.

	* omega/bag.py (Bag.exposeSink): Allow several sinks to be exposed
	under the same name, so long as their specs agree.

	* demo/sinc.py: Use the various convenience functions I just wrote.

	* demo/sinc-ps.py: Same thing as the above, but calls omega.dump
	instead of displaying the plot.

2007-01-30  Peter Williams  <peter@newton.cx>

	* omega/bag.py (Bag.linkTo): If the passed-in source is a string,
	treat this as equivalent to calling exposeSink.

2007-01-30  Peter Williams  <peter@newton.cx>

	* omega/Makefile.am (mypy_PYTHON): Hey need to add layout.py

2007-01-30  Peter Williams  <peter@newton.cx>

	* omega/base.py (RectPlot.configurePainting): Add a fieldAspect
	field; if it is set, tweak the parameters to set the aspect ratio
	of the plot field to a fixed value.
	(LinearAxisPainter.paint): Check for floating-point rounding issues
	near 0. when choosing tick locations, and make it possible to 
	turn on labeling of all ticks, not just major ticks.

	* demo/lissajou.py (rp): Set fieldAspect to be 1.0 here.

2007-01-30  Peter Williams  <peter@newton.cx>

	* omega/layout.py (Grid,Overlay): Break out these classes into a
	separate file...

	* omega/base.py (Grid,Overlay): ... from here.

	* omega/__init__.py: Modify to still import the above.

2007-01-30  Peter Williams  <peter@newton.cx>

	* omega/base.py: Have Axis objects have a coordSpec field that
	tells what kind of data item their coordinate is, so that 
	datapainters can synthesize their sinkSpec arguments correctly.
	(BandPainter): New kind of field painter, paints a (x, ylow, yhigh)
	band.
	
	* omega/styles.py (BitmapStyle.apply_genericBand): New placeholdery
	style for BandPainter.


	* demo/discrete.py: Also exercise BandPainter with some fake
	errors to go with my fake temperatures.

	* omega/sources.py: What do you know, we CAN count on
	generators. Nice!
	(Function.__init__): Allow the return type of the function to be
	specified.
	(ParametricFunction.__init__): Same
	
2007-01-30  Peter Williams  <peter@newton.cx>

	* omega/base.py (LinearAxis.transform): Add a vital float cast
	in case some fool (me) sets self.min and max to integers.
	(DiscreteAxis): New class, axis implementation for a finite set
	of discrete values.
	(DiscreteAxisPainter): New class to paint the above.
	(RectDataPainter.doChunkPaint): Don't draw lines if self.lines
	is false.

	* demo/discrete.py: New demo testing DiscreteAxis and
	DiscreteAxisPainter and point-only RectDataPainting.

	* demo/Makefile.am (EXTRA_DIST): Add discrete.py, sinc.py and
	lissajou.py

	* omega/sources.py (StoredData): New source class, just returns
	data that is passed in in the __init__ function.
	(OneItemIterator): New class, just yields one item and that's it.
	If we could count on generators, this would be totally useless.
	(OneFuncIterator): As above, but returns the result of a function
	call (that is delayed until the iterator is iterated over.)
	(Function.__iter__): Use OneFuncIterator, fix comment.
	(ParametricFunction.__iter__): Same.
	
2007-01-29  Peter Williams  <peter@newton.cx>

	* omega/bag.py (Bag.linkTo): Enforce source and sink compatiblity
	by checking sourceSpec and sinkSpec members.
	(Bag.startFlushing): Same, for exported sinks and the passed-in
	sources.
	(IndexMapFilter): Add this class, filters a stream by remapping
	indices.

	* omega/sources.py (Function.__iter__): Change to use the utility
	LinearIterator class.
	(ParametricFunction.__init__): Set a sourceSpec.
	(Function): Provide a class-default a sourceSpec.

	* demo/lissajou.py: Add a derivative little demo that tries out
	IndexMapFilter and ParametricFunction.

2007-01-29  Peter Williams  <peter@newton.cx>

	* omega/styles.py: Clean up names; TestStyle is now split into
	BitmapStyle, which defines the painting scales, and colorschemes,
	which determine the colors.
	(BitmapStyle.apply_genericStamp): Set the source color to foreground.
	(BlackOnWhiteBitmap): A style for painting black-on-white colors
	onto bitmaps.
	(WhiteOnBlackBitmap): Analogous!

	* omega/base.py (LinearAxisPainter.paint): Only label major ticks. 
	Labeling minor ticks isn't too useful and generates a lot of visual
	noise.

	* demo/stampDemo.py (style): Track class renames.

	* demo/sinc.py (style): Same.

	* omega/__init__.py: Same; now import BOWB and WOBB.

2007-01-29  Peter Williams  <peter@newton.cx>

	* omega/base.py (Painter.setParent): New function. We need parenting
	so that adding a Painter into two different containers works correctly.
	(Painter.configurePainting): Refuse to configure unless we have a parent.
	(NullPainter.doPaint): Apply a genericLine linestyle so that we actually
	paint something in the correct style.
	(Overlay): Manage children.
	(Overlay.removeChild): Rename from removePainter to conform to new model.
	(Grid): Same.

	* omega/sources.py (ParametricFunction): New class, like the Function source
	but the function yields (x,y) pairs, not just y values.
	(LinearIterator): Utility class.
	
	* omega/gtkUtil.py (OmegaArea.setPainter): Set the painter's parent to
	self so that it configures
	(OmegaArea.removeChild): Noop function to make self._painter happy. Should
	probably be implemented to clear the painter so that directly calling it
	makes sense.

2007-01-24  Peter Williams  <peter@newton.cx>

	* omega/base.py (StreamSink.expose): New utility, calls bag.exposeSink.
	(RectPlot.doPaint): Clip field painters to paint on the field. This
	might be worth making optional.
	(RectDataPainter.lineStyle): Add this style prop; apply it before
	painting field lines. Still need to make line drawing disable-able...
	Also, this property should default to some 'nth data set' style thing.

	* omega/sources.py (Function.pointiter.__init__): Add a float() in case
	the dumbass user (perhaps, for example, me) sets xmax and xmin to ints.

	* omega/styles.py (TestStyle.initContext): Add a function to be called
	before any painting is performed. Here, paints the background white.
	(TestStyle.apply_genericLine): Implement this to set the width to 1
	and color to black.

	* omega/gtkUtil.py (OmegaArea._expose): Call omegaStyle.initContext before
	painting.

	* demo/sinc.py: New demo, draws sinc * sin and sinc * cos. Requires
	numpy.

2007-01-21  Peter Williams  <peter@newton.cx>

	* omega/gtkUtil.py (OmegaDemoWindow): Copy the OmegaArea functions
	for convenience.
	(LiveDisplay): Renamed from GtkOmegaDemo, better name. Also copy
	the OmegaArea functions and reorganize __init__.

	* omega/__init__.py: Reorder imports to alphabetical and import
	LiveDisplay from gtkUtil.

	* Makefile.am: Hey, forgot to svn add the new one.

2007-01-21  Peter Williams  <peter@newton.cx>

	* omega: Move files into here, so 'import omega' from the toplevel
	works if PYTHONPATH includes '.'. 

	* demo/Makefile.am: Add this too.
	
	* Makefile.am, configure.ac: Tweaks for the above.
	
2007-01-21  Peter Williams  <peter@newton.cx>

	* bag.py (Bag.linkTo): Add basic 'linking' support, which allows
	making one sink feed into another. Going to be used for processing
	the incoming data streams. Also work a bit on what is an iter and
	what is a list, because you can only iterate over an iter once.

	* base.py (RectDataPainter.doChunkPaint): Fix obsolete references
	to self.pointStamp.
	(StreamSink.linkTo): Add this method.
	(Painter): fix init of mainStyle, duh.

2007-01-21  Peter Williams  <peter@newton.cx>

	* styles.py: Move TestStyle here; new file for holding
	various style classes.

	* bag.py: Move Bag here, new file.

	* sources.py: Move FuncSource here as Function; new file
	for holding various data source classes.

	* base.py: Above classes moved from here.

2007-01-20  Peter Williams  <peter@newton.cx>

	* stamps.py: New file, contains a bunch of generic
	stamps (formerly PointPainters). 

	* demo/stampDemo.py: New file, demos the stamps.

	* gtkUtil.py: New file, put the Gtk widgets and
	GtkOmegaDemo here.

2007-01-19  Peter Williams  <peter@newton.cx>

	* Project import.

